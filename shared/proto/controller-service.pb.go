//
//Copyright Â© 2020 Alessandro Segala (@ItalyPaleAle)
//
//This program is free software: you can redistribute it and/or modify
//it under the terms of the GNU Affero General Public License as published
//by the Free Software Foundation, version 3 of the License.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU Affero General Public License for more details.
//
//You should have received a copy of the GNU Affero General Public License
//along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: controller-service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message sent from the server when requesting the health of a node
// This is currently an empty message
type NodeHealthPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NodeHealthPing) Reset() {
	*x = NodeHealthPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHealthPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHealthPing) ProtoMessage() {}

func (x *NodeHealthPing) ProtoReflect() protoreflect.Message {
	mi := &file_controller_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHealthPing.ProtoReflect.Descriptor instead.
func (*NodeHealthPing) Descriptor() ([]byte, []int) {
	return file_controller_service_proto_rawDescGZIP(), []int{0}
}

// Argument for the GetState RPC
type GetStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
}

func (x *GetStateRequest) Reset() {
	*x = GetStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateRequest) ProtoMessage() {}

func (x *GetStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateRequest.ProtoReflect.Descriptor instead.
func (*GetStateRequest) Descriptor() ([]byte, []int) {
	return file_controller_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetStateRequest) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

// Argument for the WatchState RPC
type WatchStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
}

func (x *WatchStateRequest) Reset() {
	*x = WatchStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchStateRequest) ProtoMessage() {}

func (x *WatchStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchStateRequest.ProtoReflect.Descriptor instead.
func (*WatchStateRequest) Descriptor() ([]byte, []int) {
	return file_controller_service_proto_rawDescGZIP(), []int{2}
}

func (x *WatchStateRequest) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

// Message for requesting a TLS certificate
type TLSCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the TLS certificate to request
	CertificateId string `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
}

func (x *TLSCertificateRequest) Reset() {
	*x = TLSCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSCertificateRequest) ProtoMessage() {}

func (x *TLSCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSCertificateRequest.ProtoReflect.Descriptor instead.
func (*TLSCertificateRequest) Descriptor() ([]byte, []int) {
	return file_controller_service_proto_rawDescGZIP(), []int{3}
}

func (x *TLSCertificateRequest) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

var File_controller_service_proto protoreflect.FileDescriptor

var file_controller_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6b, 0x6f, 0x1a, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x6c, 0x73,
	0x2d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x10,
	0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x69, 0x6e, 0x67,
	0x22, 0x2e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x30, 0x0a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x15, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x32, 0xa4, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x41, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x13, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x1a, 0x17, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6b,
	0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x69, 0x6e, 0x67,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x0a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x4c, 0x53, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6b, 0x6f, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6b, 0x6f, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2d,
	0x64, 0x65, 0x76, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6b, 0x6f, 0x2f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_controller_service_proto_rawDescOnce sync.Once
	file_controller_service_proto_rawDescData = file_controller_service_proto_rawDesc
)

func file_controller_service_proto_rawDescGZIP() []byte {
	file_controller_service_proto_rawDescOnce.Do(func() {
		file_controller_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_service_proto_rawDescData)
	})
	return file_controller_service_proto_rawDescData
}

var file_controller_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_controller_service_proto_goTypes = []interface{}{
	(*NodeHealthPing)(nil),        // 0: statiko.NodeHealthPing
	(*GetStateRequest)(nil),       // 1: statiko.GetStateRequest
	(*WatchStateRequest)(nil),     // 2: statiko.WatchStateRequest
	(*TLSCertificateRequest)(nil), // 3: statiko.TLSCertificateRequest
	(*NodeHealth)(nil),            // 4: statiko.NodeHealth
	(*StateMessage)(nil),          // 5: statiko.StateMessage
	(*TLSCertificateMessage)(nil), // 6: statiko.TLSCertificateMessage
}
var file_controller_service_proto_depIdxs = []int32{
	4, // 0: statiko.Controller.HealthChannel:input_type -> statiko.NodeHealth
	2, // 1: statiko.Controller.WatchState:input_type -> statiko.WatchStateRequest
	1, // 2: statiko.Controller.GetState:input_type -> statiko.GetStateRequest
	3, // 3: statiko.Controller.GetTLSCertificate:input_type -> statiko.TLSCertificateRequest
	0, // 4: statiko.Controller.HealthChannel:output_type -> statiko.NodeHealthPing
	5, // 5: statiko.Controller.WatchState:output_type -> statiko.StateMessage
	5, // 6: statiko.Controller.GetState:output_type -> statiko.StateMessage
	6, // 7: statiko.Controller.GetTLSCertificate:output_type -> statiko.TLSCertificateMessage
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_controller_service_proto_init() }
func file_controller_service_proto_init() {
	if File_controller_service_proto != nil {
		return
	}
	file_node_health_proto_init()
	file_state_message_proto_init()
	file_tls_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_controller_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHealthPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_controller_service_proto_goTypes,
		DependencyIndexes: file_controller_service_proto_depIdxs,
		MessageInfos:      file_controller_service_proto_msgTypes,
	}.Build()
	File_controller_service_proto = out.File
	file_controller_service_proto_rawDesc = nil
	file_controller_service_proto_goTypes = nil
	file_controller_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerClient interface {
	// Bi-directional stream that is used by the server to request the health of a node
	HealthChannel(ctx context.Context, opts ...grpc.CallOption) (Controller_HealthChannelClient, error)
	// Notifies clients of state updates
	WatchState(ctx context.Context, in *WatchStateRequest, opts ...grpc.CallOption) (Controller_WatchStateClient, error)
	// Requests the desired state
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*StateMessage, error)
	// Requests a TLS certificate
	GetTLSCertificate(ctx context.Context, in *TLSCertificateRequest, opts ...grpc.CallOption) (*TLSCertificateMessage, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) HealthChannel(ctx context.Context, opts ...grpc.CallOption) (Controller_HealthChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Controller_serviceDesc.Streams[0], "/statiko.Controller/HealthChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerHealthChannelClient{stream}
	return x, nil
}

type Controller_HealthChannelClient interface {
	Send(*NodeHealth) error
	Recv() (*NodeHealthPing, error)
	grpc.ClientStream
}

type controllerHealthChannelClient struct {
	grpc.ClientStream
}

func (x *controllerHealthChannelClient) Send(m *NodeHealth) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerHealthChannelClient) Recv() (*NodeHealthPing, error) {
	m := new(NodeHealthPing)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) WatchState(ctx context.Context, in *WatchStateRequest, opts ...grpc.CallOption) (Controller_WatchStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Controller_serviceDesc.Streams[1], "/statiko.Controller/WatchState", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerWatchStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_WatchStateClient interface {
	Recv() (*StateMessage, error)
	grpc.ClientStream
}

type controllerWatchStateClient struct {
	grpc.ClientStream
}

func (x *controllerWatchStateClient) Recv() (*StateMessage, error) {
	m := new(StateMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*StateMessage, error) {
	out := new(StateMessage)
	err := c.cc.Invoke(ctx, "/statiko.Controller/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetTLSCertificate(ctx context.Context, in *TLSCertificateRequest, opts ...grpc.CallOption) (*TLSCertificateMessage, error) {
	out := new(TLSCertificateMessage)
	err := c.cc.Invoke(ctx, "/statiko.Controller/GetTLSCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServer is the server API for Controller service.
type ControllerServer interface {
	// Bi-directional stream that is used by the server to request the health of a node
	HealthChannel(Controller_HealthChannelServer) error
	// Notifies clients of state updates
	WatchState(*WatchStateRequest, Controller_WatchStateServer) error
	// Requests the desired state
	GetState(context.Context, *GetStateRequest) (*StateMessage, error)
	// Requests a TLS certificate
	GetTLSCertificate(context.Context, *TLSCertificateRequest) (*TLSCertificateMessage, error)
}

// UnimplementedControllerServer can be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (*UnimplementedControllerServer) HealthChannel(Controller_HealthChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method HealthChannel not implemented")
}
func (*UnimplementedControllerServer) WatchState(*WatchStateRequest, Controller_WatchStateServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchState not implemented")
}
func (*UnimplementedControllerServer) GetState(context.Context, *GetStateRequest) (*StateMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (*UnimplementedControllerServer) GetTLSCertificate(context.Context, *TLSCertificateRequest) (*TLSCertificateMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTLSCertificate not implemented")
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_HealthChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerServer).HealthChannel(&controllerHealthChannelServer{stream})
}

type Controller_HealthChannelServer interface {
	Send(*NodeHealthPing) error
	Recv() (*NodeHealth, error)
	grpc.ServerStream
}

type controllerHealthChannelServer struct {
	grpc.ServerStream
}

func (x *controllerHealthChannelServer) Send(m *NodeHealthPing) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerHealthChannelServer) Recv() (*NodeHealth, error) {
	m := new(NodeHealth)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Controller_WatchState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).WatchState(m, &controllerWatchStateServer{stream})
}

type Controller_WatchStateServer interface {
	Send(*StateMessage) error
	grpc.ServerStream
}

type controllerWatchStateServer struct {
	grpc.ServerStream
}

func (x *controllerWatchStateServer) Send(m *StateMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Controller_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statiko.Controller/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetTLSCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetTLSCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statiko.Controller/GetTLSCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetTLSCertificate(ctx, req.(*TLSCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "statiko.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _Controller_GetState_Handler,
		},
		{
			MethodName: "GetTLSCertificate",
			Handler:    _Controller_GetTLSCertificate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HealthChannel",
			Handler:       _Controller_HealthChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "WatchState",
			Handler:       _Controller_WatchState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controller-service.proto",
}
