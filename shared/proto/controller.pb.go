//
//Copyright Â© 2020 Alessandro Segala (@ItalyPaleAle)
//
//This program is free software: you can redistribute it and/or modify
//it under the terms of the GNU Affero General Public License as published
//by the Free Software Foundation, version 3 of the License.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU Affero General Public License for more details.
//
//You should have received a copy of the GNU Affero General Public License
//along with this program.  If not, see <https://www.gnu.org/licenses/>.

//
//Build with:
//
//```sh
//protoc \
//controller.proto \
//--go-json_out=. \
//--go_out=plugins=grpc:. \
//--go_opt=paths=source_relative
//```
//
//Requires:
//
//- github.com/golang/protobuf/protoc-gen-go
//- github.com/mitchellh/protoc-gen-go-json

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: controller.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Certificate type
type State_Site_TLS_Type int32

const (
	// Null value (should not be used)
	State_Site_TLS_NULL State_Site_TLS_Type = 0
	// Imported external certificate
	State_Site_TLS_IMPORTED State_Site_TLS_Type = 1
	// Self-signed certificate
	State_Site_TLS_SELF_SIGNED State_Site_TLS_Type = 2
	// ACME (Let's Encrypt)
	State_Site_TLS_ACME State_Site_TLS_Type = 16
	// Stored in Azure Key Vault
	State_Site_TLS_AZURE_KEY_VAULT State_Site_TLS_Type = 17
)

// Enum value maps for State_Site_TLS_Type.
var (
	State_Site_TLS_Type_name = map[int32]string{
		0:  "NULL",
		1:  "IMPORTED",
		2:  "SELF_SIGNED",
		16: "ACME",
		17: "AZURE_KEY_VAULT",
	}
	State_Site_TLS_Type_value = map[string]int32{
		"NULL":            0,
		"IMPORTED":        1,
		"SELF_SIGNED":     2,
		"ACME":            16,
		"AZURE_KEY_VAULT": 17,
	}
)

func (x State_Site_TLS_Type) Enum() *State_Site_TLS_Type {
	p := new(State_Site_TLS_Type)
	*p = x
	return p
}

func (x State_Site_TLS_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State_Site_TLS_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_controller_proto_enumTypes[0].Descriptor()
}

func (State_Site_TLS_Type) Type() protoreflect.EnumType {
	return &file_controller_proto_enumTypes[0]
}

func (x State_Site_TLS_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State_Site_TLS_Type.Descriptor instead.
func (State_Site_TLS_Type) EnumDescriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{3, 0, 0, 0}
}

// Message containing the health of a node
type NodeHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the node
	NodeName  string                `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	WebServer *NodeHealth_WebServer `protobuf:"bytes,2,opt,name=web_server,json=webServer,proto3" json:"web_server,omitempty"`
	Sync      *NodeHealth_Sync      `protobuf:"bytes,3,opt,name=sync,proto3" json:"sync,omitempty"`
	Sites     []*NodeHealth_Site    `protobuf:"bytes,10,rep,name=sites,proto3" json:"sites,omitempty"`
}

func (x *NodeHealth) Reset() {
	*x = NodeHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHealth) ProtoMessage() {}

func (x *NodeHealth) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHealth.ProtoReflect.Descriptor instead.
func (*NodeHealth) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{0}
}

func (x *NodeHealth) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeHealth) GetWebServer() *NodeHealth_WebServer {
	if x != nil {
		return x.WebServer
	}
	return nil
}

func (x *NodeHealth) GetSync() *NodeHealth_Sync {
	if x != nil {
		return x.Sync
	}
	return nil
}

func (x *NodeHealth) GetSites() []*NodeHealth_Site {
	if x != nil {
		return x.Sites
	}
	return nil
}

// Message sent from the server when requesting the health of a node
// This is currently an empty message
type NodeHealthPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NodeHealthPing) Reset() {
	*x = NodeHealthPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHealthPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHealthPing) ProtoMessage() {}

func (x *NodeHealthPing) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHealthPing.ProtoReflect.Descriptor instead.
func (*NodeHealthPing) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{1}
}

// Argument for the GetState RPC
// This is currently an empty message
type GetStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetStateRequest) Reset() {
	*x = GetStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateRequest) ProtoMessage() {}

func (x *GetStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateRequest.ProtoReflect.Descriptor instead.
func (*GetStateRequest) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{2}
}

// Contains the desired state for each node
type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sites []*State_Site `protobuf:"bytes,1,rep,name=sites,proto3" json:"sites,omitempty"`
	// Secrets (encrypted)
	Secrets  map[string][]byte `protobuf:"bytes,2,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DhParams *State_DHParams   `protobuf:"bytes,3,opt,name=dh_params,json=dhParams,proto3" json:"dh_params,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{3}
}

func (x *State) GetSites() []*State_Site {
	if x != nil {
		return x.Sites
	}
	return nil
}

func (x *State) GetSecrets() map[string][]byte {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *State) GetDhParams() *State_DHParams {
	if x != nil {
		return x.DhParams
	}
	return nil
}

// Argument for the WatchState RPC
// This is currently an empty message
type WatchStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchStateRequest) Reset() {
	*x = WatchStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchStateRequest) ProtoMessage() {}

func (x *WatchStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchStateRequest.ProtoReflect.Descriptor instead.
func (*WatchStateRequest) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{4}
}

// Health of the web server
type NodeHealth_WebServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Web server is healthy
	Healthy bool `protobuf:"varint,1,opt,name=healthy,proto3" json:"healthy,omitempty"`
}

func (x *NodeHealth_WebServer) Reset() {
	*x = NodeHealth_WebServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHealth_WebServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHealth_WebServer) ProtoMessage() {}

func (x *NodeHealth_WebServer) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHealth_WebServer.ProtoReflect.Descriptor instead.
func (*NodeHealth_WebServer) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NodeHealth_WebServer) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

// Sync activity
type NodeHealth_Sync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sync is running
	Running bool `protobuf:"varint,1,opt,name=running,proto3" json:"running,omitempty"`
	// Last sync time (UNIX timestamp)
	LastSync int64 `protobuf:"varint,2,opt,name=last_sync,json=lastSync,proto3" json:"last_sync,omitempty"`
	// Last sync error (optional)
	SyncError string `protobuf:"bytes,3,opt,name=sync_error,json=syncError,proto3" json:"sync_error,omitempty"`
}

func (x *NodeHealth_Sync) Reset() {
	*x = NodeHealth_Sync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHealth_Sync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHealth_Sync) ProtoMessage() {}

func (x *NodeHealth_Sync) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHealth_Sync.ProtoReflect.Descriptor instead.
func (*NodeHealth_Sync) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{0, 1}
}

func (x *NodeHealth_Sync) GetRunning() bool {
	if x != nil {
		return x.Running
	}
	return false
}

func (x *NodeHealth_Sync) GetLastSync() int64 {
	if x != nil {
		return x.LastSync
	}
	return 0
}

func (x *NodeHealth_Sync) GetSyncError() string {
	if x != nil {
		return x.SyncError
	}
	return ""
}

// Sites
type NodeHealth_Site struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Domain name
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// Deployed app (optional)
	App string `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
	// App error (optional)
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *NodeHealth_Site) Reset() {
	*x = NodeHealth_Site{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHealth_Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHealth_Site) ProtoMessage() {}

func (x *NodeHealth_Site) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHealth_Site.ProtoReflect.Descriptor instead.
func (*NodeHealth_Site) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{0, 2}
}

func (x *NodeHealth_Site) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *NodeHealth_Site) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *NodeHealth_Site) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// List of sites
type State_Site struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Domains: primary and aliases
	Domain  string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Aliases []string `protobuf:"bytes,2,rep,name=aliases,proto3" json:"aliases,omitempty"`
	// Temporary site (e.g. for testing)
	Temporary bool            `protobuf:"varint,3,opt,name=temporary,proto3" json:"temporary,omitempty"`
	Tls       *State_Site_TLS `protobuf:"bytes,4,opt,name=tls,proto3" json:"tls,omitempty"`
	App       *State_Site_App `protobuf:"bytes,5,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *State_Site) Reset() {
	*x = State_Site{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State_Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State_Site) ProtoMessage() {}

func (x *State_Site) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State_Site.ProtoReflect.Descriptor instead.
func (*State_Site) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{3, 0}
}

func (x *State_Site) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *State_Site) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *State_Site) GetTemporary() bool {
	if x != nil {
		return x.Temporary
	}
	return false
}

func (x *State_Site) GetTls() *State_Site_TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *State_Site) GetApp() *State_Site_App {
	if x != nil {
		return x.App
	}
	return nil
}

// DH parameters
type State_DHParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Generation date (UNIX timestamp)
	Date int64 `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty"`
	// PEM-encoded value
	Pem string `protobuf:"bytes,2,opt,name=pem,proto3" json:"pem,omitempty"`
}

func (x *State_DHParams) Reset() {
	*x = State_DHParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State_DHParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State_DHParams) ProtoMessage() {}

func (x *State_DHParams) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State_DHParams.ProtoReflect.Descriptor instead.
func (*State_DHParams) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{3, 2}
}

func (x *State_DHParams) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *State_DHParams) GetPem() string {
	if x != nil {
		return x.Pem
	}
	return ""
}

// TLS configuration (optional)
type State_Site_TLS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type State_Site_TLS_Type `protobuf:"varint,1,opt,name=type,proto3,enum=service.State_Site_TLS_Type" json:"type,omitempty"`
	// Certificate name and version (used by certain types only)
	Certificate string `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
	Version     string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *State_Site_TLS) Reset() {
	*x = State_Site_TLS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State_Site_TLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State_Site_TLS) ProtoMessage() {}

func (x *State_Site_TLS) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State_Site_TLS.ProtoReflect.Descriptor instead.
func (*State_Site_TLS) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *State_Site_TLS) GetType() State_Site_TLS_Type {
	if x != nil {
		return x.Type
	}
	return State_Site_TLS_NULL
}

func (x *State_Site_TLS) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

func (x *State_Site_TLS) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// App (optional)
type State_Site_App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// App name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *State_Site_App) Reset() {
	*x = State_Site_App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State_Site_App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State_Site_App) ProtoMessage() {}

func (x *State_Site_App) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State_Site_App.ProtoReflect.Descriptor instead.
func (*State_Site_App) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{3, 0, 1}
}

func (x *State_Site_App) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_controller_proto protoreflect.FileDescriptor

var file_controller_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x92, 0x03, 0x0a, 0x0a,
	0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x09, 0x77, 0x65, 0x62, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x04, 0x73,
	0x79, 0x6e, 0x63, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x05, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x1a, 0x25, 0x0a, 0x09, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x1a, 0x5c, 0x0a, 0x04, 0x53, 0x79,
	0x6e, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x79, 0x6e, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x46, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x10, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x69,
	0x6e, 0x67, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9d, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x69, 0x74, 0x65, 0x52, 0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x12, 0x34, 0x0a, 0x09, 0x64, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x48, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x08, 0x64,
	0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x8d, 0x03, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79,
	0x12, 0x29, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x69,
	0x74, 0x65, 0x2e, 0x54, 0x4c, 0x53, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x03, 0x61,
	0x70, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x2e, 0x41, 0x70,
	0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x1a, 0xc3, 0x01, 0x0a, 0x03, 0x54, 0x4c, 0x53, 0x12, 0x30,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x69, 0x74,
	0x65, 0x2e, 0x54, 0x4c, 0x53, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4e, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x45, 0x4c, 0x46, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x41, 0x43, 0x4d, 0x45, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x5a, 0x55, 0x52, 0x45,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x56, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x11, 0x1a, 0x19, 0x0a, 0x03,
	0x41, 0x70, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x30, 0x0a, 0x08, 0x44, 0x48, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x70, 0x65, 0x6d, 0x22, 0x13, 0x0a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0xc1, 0x01, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x1a,
	0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x50, 0x69, 0x6e, 0x67, 0x28, 0x01, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x30, 0x01, 0x42, 0x2d,
	0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6b, 0x6f, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6b, 0x6f,
	0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_controller_proto_rawDescOnce sync.Once
	file_controller_proto_rawDescData = file_controller_proto_rawDesc
)

func file_controller_proto_rawDescGZIP() []byte {
	file_controller_proto_rawDescOnce.Do(func() {
		file_controller_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_proto_rawDescData)
	})
	return file_controller_proto_rawDescData
}

var file_controller_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_controller_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_controller_proto_goTypes = []interface{}{
	(State_Site_TLS_Type)(0),     // 0: service.State.Site.TLS.Type
	(*NodeHealth)(nil),           // 1: service.NodeHealth
	(*NodeHealthPing)(nil),       // 2: service.NodeHealthPing
	(*GetStateRequest)(nil),      // 3: service.GetStateRequest
	(*State)(nil),                // 4: service.State
	(*WatchStateRequest)(nil),    // 5: service.WatchStateRequest
	(*NodeHealth_WebServer)(nil), // 6: service.NodeHealth.WebServer
	(*NodeHealth_Sync)(nil),      // 7: service.NodeHealth.Sync
	(*NodeHealth_Site)(nil),      // 8: service.NodeHealth.Site
	(*State_Site)(nil),           // 9: service.State.Site
	nil,                          // 10: service.State.SecretsEntry
	(*State_DHParams)(nil),       // 11: service.State.DHParams
	(*State_Site_TLS)(nil),       // 12: service.State.Site.TLS
	(*State_Site_App)(nil),       // 13: service.State.Site.App
}
var file_controller_proto_depIdxs = []int32{
	6,  // 0: service.NodeHealth.web_server:type_name -> service.NodeHealth.WebServer
	7,  // 1: service.NodeHealth.sync:type_name -> service.NodeHealth.Sync
	8,  // 2: service.NodeHealth.sites:type_name -> service.NodeHealth.Site
	9,  // 3: service.State.sites:type_name -> service.State.Site
	10, // 4: service.State.secrets:type_name -> service.State.SecretsEntry
	11, // 5: service.State.dh_params:type_name -> service.State.DHParams
	12, // 6: service.State.Site.tls:type_name -> service.State.Site.TLS
	13, // 7: service.State.Site.app:type_name -> service.State.Site.App
	0,  // 8: service.State.Site.TLS.type:type_name -> service.State.Site.TLS.Type
	1,  // 9: service.Controller.HealthChannel:input_type -> service.NodeHealth
	3,  // 10: service.Controller.GetState:input_type -> service.GetStateRequest
	5,  // 11: service.Controller.WatchState:input_type -> service.WatchStateRequest
	2,  // 12: service.Controller.HealthChannel:output_type -> service.NodeHealthPing
	4,  // 13: service.Controller.GetState:output_type -> service.State
	4,  // 14: service.Controller.WatchState:output_type -> service.State
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_controller_proto_init() }
func file_controller_proto_init() {
	if File_controller_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_controller_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHealthPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHealth_WebServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHealth_Sync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHealth_Site); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State_Site); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State_DHParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State_Site_TLS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State_Site_App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_controller_proto_goTypes,
		DependencyIndexes: file_controller_proto_depIdxs,
		EnumInfos:         file_controller_proto_enumTypes,
		MessageInfos:      file_controller_proto_msgTypes,
	}.Build()
	File_controller_proto = out.File
	file_controller_proto_rawDesc = nil
	file_controller_proto_goTypes = nil
	file_controller_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerClient interface {
	// Bi-directional stream that is used by the server to request the health of a node
	HealthChannel(ctx context.Context, opts ...grpc.CallOption) (Controller_HealthChannelClient, error)
	// Requests the desired state
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*State, error)
	// Notifies clients of state updates
	WatchState(ctx context.Context, in *WatchStateRequest, opts ...grpc.CallOption) (Controller_WatchStateClient, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) HealthChannel(ctx context.Context, opts ...grpc.CallOption) (Controller_HealthChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Controller_serviceDesc.Streams[0], "/service.Controller/HealthChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerHealthChannelClient{stream}
	return x, nil
}

type Controller_HealthChannelClient interface {
	Send(*NodeHealth) error
	Recv() (*NodeHealthPing, error)
	grpc.ClientStream
}

type controllerHealthChannelClient struct {
	grpc.ClientStream
}

func (x *controllerHealthChannelClient) Send(m *NodeHealth) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerHealthChannelClient) Recv() (*NodeHealthPing, error) {
	m := new(NodeHealthPing)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/service.Controller/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) WatchState(ctx context.Context, in *WatchStateRequest, opts ...grpc.CallOption) (Controller_WatchStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Controller_serviceDesc.Streams[1], "/service.Controller/WatchState", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerWatchStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_WatchStateClient interface {
	Recv() (*State, error)
	grpc.ClientStream
}

type controllerWatchStateClient struct {
	grpc.ClientStream
}

func (x *controllerWatchStateClient) Recv() (*State, error) {
	m := new(State)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControllerServer is the server API for Controller service.
type ControllerServer interface {
	// Bi-directional stream that is used by the server to request the health of a node
	HealthChannel(Controller_HealthChannelServer) error
	// Requests the desired state
	GetState(context.Context, *GetStateRequest) (*State, error)
	// Notifies clients of state updates
	WatchState(*WatchStateRequest, Controller_WatchStateServer) error
}

// UnimplementedControllerServer can be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (*UnimplementedControllerServer) HealthChannel(Controller_HealthChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method HealthChannel not implemented")
}
func (*UnimplementedControllerServer) GetState(context.Context, *GetStateRequest) (*State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (*UnimplementedControllerServer) WatchState(*WatchStateRequest, Controller_WatchStateServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchState not implemented")
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_HealthChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerServer).HealthChannel(&controllerHealthChannelServer{stream})
}

type Controller_HealthChannelServer interface {
	Send(*NodeHealthPing) error
	Recv() (*NodeHealth, error)
	grpc.ServerStream
}

type controllerHealthChannelServer struct {
	grpc.ServerStream
}

func (x *controllerHealthChannelServer) Send(m *NodeHealthPing) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerHealthChannelServer) Recv() (*NodeHealth, error) {
	m := new(NodeHealth)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Controller_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Controller/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_WatchState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).WatchState(m, &controllerWatchStateServer{stream})
}

type Controller_WatchStateServer interface {
	Send(*State) error
	grpc.ServerStream
}

type controllerWatchStateServer struct {
	grpc.ServerStream
}

func (x *controllerWatchStateServer) Send(m *State) error {
	return x.ServerStream.SendMsg(m)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _Controller_GetState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HealthChannel",
			Handler:       _Controller_HealthChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "WatchState",
			Handler:       _Controller_WatchState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controller.proto",
}
