/*
Copyright Â© 2020 Alessandro Segala (@ItalyPaleAle)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/*
Build with:

```sh
protoc \
  controller.proto \
  --go_out=plugins=grpc:. \
  --go-json_out=. \
  --go_opt=paths=source_relative
```

Requires:

- github.com/golang/protobuf/protoc-gen-go
- github.com/mitchellh/protoc-gen-go-json
*/

syntax = "proto3";

package service;

option go_package = "github.com/statiko-dev/statiko/shared/service";

// Service that manages the state for the cluster and performs all background tasks
service Controller {
  // Bi-directional stream that is used by the server to request the health of a node
  rpc HealthUpdate(stream NodeHealth) returns (stream NodeHealthPing);

  // Requests the desired state
  rpc GetState(GetStateRequest) returns (State);

  // Notifies clients of state updates
  rpc WatchState(WatchStateRequest) returns (stream State);
}

// Message containing the health of a node
message NodeHealth {
  // Name of the node
  string node_name = 1;

  // Health of the web server
  message WebServer {
    // Web server is healthy
    bool healthy = 1;
  }
  WebServer web_server = 2;

  // Sync activity
  message Sync {
    // Sync is running
    bool running = 1;

    // Last sync time (UNIX timestamp)
    int64 last_sync = 2;

    // Last sync error (optional)
    string sync_error = 3;
  }
  Sync sync = 3;

  // Sites
  message Site {
    // Domain name
    string domain = 1;
    // Deployed app (optional)
    string app = 2;
    // App error (optional)
    string error = 3;
  }
  repeated Site sites = 10;
}

// Message sent from the server when requesting the health of a node
// This is currently an empty message
message NodeHealthPing {}

// Argument for the GetState RPC
// This is currently an empty message
message GetStateRequest {}

// Contains the desired state for each node
message State {
  // List of sites
  message Site {
    // Domains: primary and aliases
    string domain = 1;
    repeated string aliases = 2;

    // Temporary site (e.g. for testing)
    bool temporary = 3;

    // TLS configuration
    message TLS {
      // Certificate type
      enum Type {
        // Null value (should not be used)
        NULL = 0;
        // Imported external certificate
        IMPORTED = 1;
        // Self-signed certificate
        SELF_SIGNED = 2;
        // ACME (Let's Encrypt)
        ACME = 3;
        // Stored in Azure Key Vault
        AZURE_KEY_VAULT = 4;
      }
      Type type = 1;

      // Certificate name and version (used by certain types only)
      string certificate = 2;
      string version = 3;
    }

    // App name (optional)
    string app = 4;
  }
  repeated Site sites = 1;

  // Secrets (encrypted)
  map<string,bytes> secrets = 2;

  // DH parameters
  message DHParams {
    // Generation date (UNIX timestamp)
    int64 date = 1;
    // PEM-encoded value
    string pem = 2;
  }
  DHParams dh_params = 3;
}

// Argument for the WatchState RPC
// This is currently an empty message
message WatchStateRequest {}
