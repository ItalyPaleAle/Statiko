# This pipeline runs the release task every time a new tag is pushed that starts with v*
# It creates a release on GitHub
# It then builds binanries for all architectures (amd64, armhf, arm64) and adds them to the release
# Lastly, it builds Docker images for all architectures and publishes them on Docker Hub

# Required secrets:
# - DOCKER_PASSWORD password for Docker Hub

name: Release Statiko

on:
  push:
    tags:
      # Push to tags matching v*
      - 'v*'

env:
  GO_VERSION: 1.13
  BUILDER_IMAGE: 'golang:${{env.GO_VERSION}}-alpine'
  DOCKER_USERNAME: 'italypaleale'
  DOCKER_REPO: '${{env.DOCKER_USERNAME}}/statiko'
  QEMU_VERSION: 'v4.2.0-4'
  
jobs:

  build:
    name: Build
    runs-on: ubuntu-18.04
    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    # Setup Docker buildx
    - name: Set up Docker buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest

    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}
    
    # Login to Docker Hub
    - name: Login to Docker Hub
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "${DOCKER_PASSWORD}" | docker login --username "${{env.DOCKER_USERNAME}}" --password-stdin
    
    # Build for all platforms
    - name: Set variables
      run: |
        # Trim the first 10 characters, which are "refs/tags/"
        BUILD_ID="${GITHUB_REF:10}"
        # Just like BUILD_ID, but without the "v" at the beginning
        BUILD_VERSION="${GITHUB_REF:11}"
        BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%S')
        COMMIT_HASH=$(echo $GITHUB_SHA | head -c 7)
        echo ::set-env name=BUILD_ID::$BUILD_ID
        echo ::set-env name=BUILD_VERSION::$BUILD_VERSION
        echo ::set-env name=BUILD_TIME::$BUILD_TIME
        echo ::set-env name=COMMIT_HASH::$COMMIT_HASH

    - name: Build Statiko for all archs
      run: |
        mkdir -p .bin

        # Build using Docker
        docker run \
          --rm \
          -v "$PWD":/usr/src/myapp \
          -w /usr/src/myapp \
          ${{env.BUILDER_IMAGE}} \
            sh -c '
              echo -e "###\nFetching modules\n"
              GO111MODULE=on \
                go get

              echo -e "\n###\nBuilding amd64\n"
              # Disable CGO so the binary is fully static
              CGO_ENABLED=0 \
              GOOS=linux \
              GOARCH=amd64 \
              GO111MODULE=on \
                go build \
                  -v \
                  -ldflags "-X github.com/ItalyPaleAle/statiko/buildinfo.ENV=production -X github.com/ItalyPaleAle/statiko/buildinfo.BuildID=${{env.BUILD_ID}} -X github.com/ItalyPaleAle/statiko/buildinfo.BuildTime=${{env.BUILD_TIME}} -X github.com/ItalyPaleAle/statiko/buildinfo.CommitHash=${{env.COMMIT_HASH}}" \
                  -o .bin/statiko_linux_amd64
              
              echo -e "\n###\nBuilding arm64v8\n"
              CGO_ENABLED=0 \
              GOOS=linux \
              GOARCH=arm64 \
              GO111MODULE=on \
                go build \
                  -v \
                  -ldflags "-X github.com/ItalyPaleAle/statiko/buildinfo.ENV=production -X github.com/ItalyPaleAle/statiko/buildinfo.BuildID=${{env.BUILD_ID}} -X github.com/ItalyPaleAle/statiko/buildinfo.BuildTime=${{env.BUILD_TIME}} -X github.com/ItalyPaleAle/statiko/buildinfo.CommitHash=${{env.COMMIT_HASH}}" \
                  -o .bin/statiko_linux_arm64v8
              
              echo -e "\n###\nBuilding arm32v7\n"
              CGO_ENABLED=0 \
              GOOS=linux \
              GOARCH=arm \
              GOARM=7 \
              GO111MODULE=on \
                go build \
                  -v \
                  -ldflags "-X github.com/ItalyPaleAle/statiko/buildinfo.ENV=production -X github.com/ItalyPaleAle/statiko/buildinfo.BuildID=${{env.BUILD_ID}} -X github.com/ItalyPaleAle/statiko/buildinfo.BuildTime=${{env.BUILD_TIME}} -X github.com/ItalyPaleAle/statiko/buildinfo.CommitHash=${{env.COMMIT_HASH}}" \
                  -o .bin/statiko_linux_arm32v7
              '
        echo -e "\n###\nCompilation done\n"
        ls -al .bin
    
    # Build Docker images
    - name: Build and push Docker multi-arch image
      run: |
        docker buildx build \
          -t ${{env.DOCKER_REPO}}:${{env.BUILD_VERSION}} \
          --push \
          -f .container/agent/Dockerfile \
          .

    # Publish artifacts
    - name: Publish binaries as artifacts
      uses: actions/upload-artifact@v1
      with:
        name: bin
        path: .bin
    
    # Create release and upload assets
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false

    - name: Upload release asset amd64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .bin/statiko_linux_amd64
        asset_name: statiko_linux_amd64
        asset_content_type: application/octet-stream

    - name: Upload release asset arm64v8
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .bin/statiko_linux_arm64v8
        asset_name: statiko_linux_arm64v8
        asset_content_type: application/octet-stream

    - name: Upload release asset arm32v7
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .bin/statiko_linux_armh32v7
        asset_name: statiko_linux_arm32v7
        asset_content_type: application/octet-stream

