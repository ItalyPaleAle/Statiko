# This pipeline runs the Continuous Integration tasks
# Builds statiko for amd64 only, creates the Docker container and the test container, and runs the unit tests

# Required secret variables:
# - AZURE_CLIENT_SECRET: Secret key for the Azure Service Principal

trigger:
  - master

resources:
  - repo: self

variables:
  # Go configuration
  goVersion: 1.13
  builderImage: 'golang:$(goVersion)-alpine'

  # Docker images
  dockerRegistryServiceConnection: 'a1191c24-1129-4d6f-8c0a-52a95cd72f24'
  imageRepository: 'italypaleale/statiko'
  dockerfilePath: '$(Build.SourcesDirectory)/.container/agent/Dockerfile'
  testDockerfilePath: '$(Build.SourcesDirectory)/.container/e2e-test/Dockerfile'
  testImageRepository: 'statiko-test'

pool:
  vmImage: ubuntu-18.04

steps:
  # Pull builder image
  - bash: |
      set -e
      docker pull $(builderImage)
    displayName: "Pull builder image"
  # Define build info
  - bash: |
      set -e
      BUILD_ID=$(Build.BuildNumber)
      BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%S')
      COMMIT_HASH=$(git log --pretty=format:'%h' -n 1)
      echo "##vso[task.setvariable variable=BUILD_ID]$BUILD_ID"
      echo "##vso[task.setvariable variable=BUILD_TIME]$BUILD_TIME"
      echo "##vso[task.setvariable variable=COMMIT_HASH]$COMMIT_HASH"
    displayName: "Define build info"
  # Build statiko
  - bash: |
      set -e

      # Build using Docker
      docker run \
        --rm \
        -v "$PWD":/usr/src/myapp \
        -w /usr/src/myapp \
        $(builderImage) \
          sh -c '
            # Disable CGO so the binary is fully static
            CGO_ENABLED=0 \
            GOOS=linux \
            GOARCH=amd64 \
            GO111MODULE=on \
              go build \
                -ldflags "-X github.com/ItalyPaleAle/statiko/buildinfo.ENV=production -X github.com/ItalyPaleAle/statiko/buildinfo.BuildID=$BUILD_ID -X github.com/ItalyPaleAle/statiko/buildinfo.BuildTime=$BUILD_TIME -X github.com/ItalyPaleAle/statiko/buildinfo.CommitHash=$COMMIT_HASH" \
                -o .bin/statiko_linux_amd64
            
            # Build with coverage enabled
            CGO_ENABLED=0 \
            GOOS=linux \
            GOARCH=amd64 \
            GO111MODULE=on \
              go test \
                -coverpkg=github.com/ItalyPaleAle/statiko/... \
                -c \
                -tags e2etests \
                -ldflags "-X github.com/ItalyPaleAle/statiko/buildinfo.ENV=production -X github.com/ItalyPaleAle/statiko/buildinfo.BuildID=$BUILD_ID -X github.com/ItalyPaleAle/statiko/buildinfo.BuildTime=$BUILD_TIME -X github.com/ItalyPaleAle/statiko/buildinfo.CommitHash=$COMMIT_HASH" \
                -o .bin/statiko_linux_amd64.test
            '
    displayName: "Build statiko"
  # Build Docker image
  - task: Docker@2
    displayName: Build Docker image
    inputs:
      command: build
      buildContext: $(Build.SourcesDirectory)
      repository: $(imageRepository)
      dockerfile: $(dockerfilePath)
      containerRegistry: $(dockerRegistryServiceConnection)
      arguments: --build-arg ARCH=amd64
      tags: |
        latest
        ci-$(Build.BuildNumber)
  # Build Docker test images
  - bash: |
      set -e
      mkdir .e2e-test/.bin
      cp .bin/*.test .e2e-test/.bin
      # To stop at the test image (without coverage), add "--target testimage"
      docker build \
        -f $(testDockerfilePath) \
        -t $(testImageRepository) \
        $(Build.SourcesDirectory)/.e2e-test
    displayName: Build Docker test image with coverage
  # Run end-to-end tests
  - bash: |
      set -e
      docker run \
        --rm \
        -v $(pwd)/.e2e-test/container_etc:/etc/statiko \
        -v $(pwd)/.e2e-test/results:/results \
        -e "AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET)" \
        -e "NODE_URL=statiko.local:2265" \
        -e "NGINX_URL=statiko.local" \
        --add-host "statiko.local:127.0.0.1" \
        $(testImageRepository)
    displayName:  Run end-to-end tests
  # Print logs
  - bash: |
      echo -e "### Test stdout ###\n"
      cat .e2e-test/results/stdout
      echo -e "\n\n### Test stderr ###\n"
      cat .e2e-test/results/stderr
    # This step always runs, even if the tests failed
    condition: succeededOrFailed()
    displayName: Print logs
  # Publish test results
  - task: PublishTestResults@2
    displayName: Publish test results
    inputs:
      testRunner: JUnit
      testResultsFiles: .e2e-test/results/*.xml
    # This step always runs, even if the tests failed
    condition: succeededOrFailed()
  # Get coverage tools
  - task: UniversalPackages@0
    inputs:
      command: download
      downloadDirectory: $(System.DefaultWorkingDirectory)/.bin/
      vstsFeed: go-binaries
      vstsFeedPackage: 'coverage-linux-amd64'
      vstsPackageVersion: 1.0.0
    displayName: Get coverage tools
  # Convert coverage results
  - bash: |
      set -e
      chmod +x .bin/gocov*
      sudo chmod 0777 .e2e-test/results
      sudo chmod 0666 .e2e-test/results/*
      .bin/gocov convert .e2e-test/results/coverage.out | .bin/gocov-xml > .e2e-test/results/coverage.xml
    displayName: Convert coverage results
  # Publish coverage results
  - task: PublishCodeCoverageResults@1
    inputs: 
      codeCoverageTool: Cobertura
      summaryFileLocation: $(Build.SourcesDirectory)/.e2e-test/results/coverage.xml
    displayName: Publish coverage results
  # Push Docker image to container registry
  # Only run on master
  - task: Docker@2
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Push Docker image to container registry
    inputs:
      command: push
      repository: $(imageRepository)
      containerRegistry: $(dockerRegistryServiceConnection)
      tags: |
        ci-$(Build.BuildNumber)
